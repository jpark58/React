{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleWare from 'redux-thunk';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  return next(action);\n};\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleWare];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/jinseopark/Desktop/Projects/react/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","thunkMiddleWare","loggerMiddleware","dispatch","getState","next","action","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AAEA,MAAMC,gBAAgB,GACpB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACV,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,WAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,CAAb;AACD;;AAED,SAAOC,IAAI,CAACC,MAAD,CAAX;AACD,CATH;;AAWA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,WAAW,GAAG,CAACP,eAAD,CAApB;AACA,QAAMQ,QAAQ,GACZ,QACIZ,OAAO,CAACD,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CADX,GAEIR,mBAAmB,CAACJ,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGZ,WAAW,CAACC,OAAD,EAAUU,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CARD;;AAUA,MAAMC,OAAO,GAAGhB,aAAa,CAACY,cAAD,EAAiB;AAC5CK,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAGA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleWare from 'redux-thunk';\n\nconst loggerMiddleware =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState);\n    }\n\n    return next(action);\n  };\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleWare];\n  const enhancer =\n    process.env.NODE_ENV === 'production'\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === 'development',\n});\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}