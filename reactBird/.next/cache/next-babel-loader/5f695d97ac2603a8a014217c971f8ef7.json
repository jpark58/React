{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/jinseopark/Desktop/Projects/reacts/reactBird/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","error","response","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}